;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Run all of this when the document's ready
$(function(){

  // Load all of our UI elements here so that they're cached and super fast
  var metaform = $('#metaform'),
      wordEntry = $('#word-entry'),
      btnEntry = $('.btn-entry'),
      question = $('#question'),
      answer = $('#answer'),
      answerWord = $('#word'),
      answerMetaphor = $('#metaphor'),
      answerArticle = $('#article'),
      twitterShare = $('#twitter-share'),
      title = $('title');

  // Used later for history state changes
  var metaphorUrlRegex = /metaphor\/(.+)\/(.+)/;

  var showAnswer = function(word, metaphor){
    var article = 'a';

    if(metaphor[0].match(/[aeiou]/)){
      article = 'an';
    }

    // Set the text
    answerWord.text(word);
    answerMetaphor.text(metaphor);
    answerArticle.text(article);

    title.text('Metaphorgy: My ' + word + ' is ' + article + ' ' + metaphor);

    twitterShare.attr('href', 
      'https://twitter.com/share?url=https%3A%2F%2Fwww.metaphor.gy%2Fmetaphor%2F' + word + '%2F' + metaphor + 
        '&text=My%20' + word + '%20is%20a%20' + metaphor + '.%20&hashtags=metaphorgy');

    // Toggle all the classes, and undisable the button
    btnEntry.addClass('btn-success3d').removeAttr('disabled');
    question.addClass('hidden');
    answer.removeClass('hidden');
  }

  // Reset the hidden classes and whatnot
  var resetForm = function(){
    wordEntry.val('');
    btnEntry.removeClass('btn-success3d');
    question.removeClass('hidden');
    answer.addClass('hidden');

    title.text('Metaphorgy: Metaphor Generator');
  }

  // When the button is clicked, either submit the form or reset the state
  btnEntry.on('click', function(e){
    e.preventDefault();

    if(!btnEntry.attr('disabled')){
      if(btnEntry.hasClass('btn-success3d')){
        // Save it in the history so it looks like  a legit url
        if(history && history.pushState){
          history.pushState(null, null, '/');
        }

        // Reset the form, remove classes and whatnot
        resetForm();
      }else{
        // Otherwise, go ahead and submit the form
        metaform.submit();
      }
    }
  });

  // When the form is submitted, get the data
  metaform.on('submit', function(e){
    // Prevent the form from actually submitting; ajax instead
    e.preventDefault();

    var word = wordEntry.val();

    // Only continue if word isn't empty
    if(word != ""){
      btnEntry.removeClass('btn-error3d');

      // Only do a thing if we're not waiting on a response
      if(!btnEntry.attr('disabled')){

        // Set the button to disabled while it loads
        btnEntry.attr('disabled', 'disabled');

        // Load the metaphor from the server
        $.getJSON('/metaphor/' + word, function(data){
          if(data.metaphor){
            // Save it in the history so it looks like  a legit url
            if(history && history.pushState){
              history.pushState(null, null, '/metaphor/' + data.word + '/' + data.metaphor);
            }

            // Show the answer in the fields
            showAnswer(data.word, data.metaphor);
          }else{
            btnEntry.addClass('btn-error3d').removeAttr('disabled');
          }
        });
      }
    }
  });

  var stateChange = function(path, fn){

  }

  var handleHistoryChange = function(e) {
    var regexResult = metaphorUrlRegex.exec(location.pathname);

    if(regexResult && regexResult.length == 3){
      var word = decodeURI(regexResult[1]),
          metaphor = decodeURI(regexResult[2]);
      showAnswer(word, metaphor);
    }else{
      resetForm();
    };
  }

  // When the history changes, load the metaphor or reset the form. Watch for
  // history changes.
  window.addEventListener("popstate", handleHistoryChange);
});


},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvYnJlYWtlcnMvU2l0ZXMvbWV0YXBob3JneS9zcmMvYXNzZXRzL2pzL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUnVuIGFsbCBvZiB0aGlzIHdoZW4gdGhlIGRvY3VtZW50J3MgcmVhZHlcbiQoZnVuY3Rpb24oKXtcblxuICAvLyBMb2FkIGFsbCBvZiBvdXIgVUkgZWxlbWVudHMgaGVyZSBzbyB0aGF0IHRoZXkncmUgY2FjaGVkIGFuZCBzdXBlciBmYXN0XG4gIHZhciBtZXRhZm9ybSA9ICQoJyNtZXRhZm9ybScpLFxuICAgICAgd29yZEVudHJ5ID0gJCgnI3dvcmQtZW50cnknKSxcbiAgICAgIGJ0bkVudHJ5ID0gJCgnLmJ0bi1lbnRyeScpLFxuICAgICAgcXVlc3Rpb24gPSAkKCcjcXVlc3Rpb24nKSxcbiAgICAgIGFuc3dlciA9ICQoJyNhbnN3ZXInKSxcbiAgICAgIGFuc3dlcldvcmQgPSAkKCcjd29yZCcpLFxuICAgICAgYW5zd2VyTWV0YXBob3IgPSAkKCcjbWV0YXBob3InKSxcbiAgICAgIGFuc3dlckFydGljbGUgPSAkKCcjYXJ0aWNsZScpLFxuICAgICAgdHdpdHRlclNoYXJlID0gJCgnI3R3aXR0ZXItc2hhcmUnKSxcbiAgICAgIHRpdGxlID0gJCgndGl0bGUnKTtcblxuICAvLyBVc2VkIGxhdGVyIGZvciBoaXN0b3J5IHN0YXRlIGNoYW5nZXNcbiAgdmFyIG1ldGFwaG9yVXJsUmVnZXggPSAvbWV0YXBob3JcXC8oLispXFwvKC4rKS87XG5cbiAgdmFyIHNob3dBbnN3ZXIgPSBmdW5jdGlvbih3b3JkLCBtZXRhcGhvcil7XG4gICAgdmFyIGFydGljbGUgPSAnYSc7XG5cbiAgICBpZihtZXRhcGhvclswXS5tYXRjaCgvW2FlaW91XS8pKXtcbiAgICAgIGFydGljbGUgPSAnYW4nO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgdGV4dFxuICAgIGFuc3dlcldvcmQudGV4dCh3b3JkKTtcbiAgICBhbnN3ZXJNZXRhcGhvci50ZXh0KG1ldGFwaG9yKTtcbiAgICBhbnN3ZXJBcnRpY2xlLnRleHQoYXJ0aWNsZSk7XG5cbiAgICB0aXRsZS50ZXh0KCdNZXRhcGhvcmd5OiBNeSAnICsgd29yZCArICcgaXMgJyArIGFydGljbGUgKyAnICcgKyBtZXRhcGhvcik7XG5cbiAgICB0d2l0dGVyU2hhcmUuYXR0cignaHJlZicsIFxuICAgICAgJ2h0dHBzOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPWh0dHBzJTNBJTJGJTJGd3d3Lm1ldGFwaG9yLmd5JTJGbWV0YXBob3IlMkYnICsgd29yZCArICclMkYnICsgbWV0YXBob3IgKyBcbiAgICAgICAgJyZ0ZXh0PU15JTIwJyArIHdvcmQgKyAnJTIwaXMlMjBhJTIwJyArIG1ldGFwaG9yICsgJy4lMjAmaGFzaHRhZ3M9bWV0YXBob3JneScpO1xuXG4gICAgLy8gVG9nZ2xlIGFsbCB0aGUgY2xhc3NlcywgYW5kIHVuZGlzYWJsZSB0aGUgYnV0dG9uXG4gICAgYnRuRW50cnkuYWRkQ2xhc3MoJ2J0bi1zdWNjZXNzM2QnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgIHF1ZXN0aW9uLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICBhbnN3ZXIucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICB9XG5cbiAgLy8gUmVzZXQgdGhlIGhpZGRlbiBjbGFzc2VzIGFuZCB3aGF0bm90XG4gIHZhciByZXNldEZvcm0gPSBmdW5jdGlvbigpe1xuICAgIHdvcmRFbnRyeS52YWwoJycpO1xuICAgIGJ0bkVudHJ5LnJlbW92ZUNsYXNzKCdidG4tc3VjY2VzczNkJyk7XG4gICAgcXVlc3Rpb24ucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgIGFuc3dlci5hZGRDbGFzcygnaGlkZGVuJyk7XG5cbiAgICB0aXRsZS50ZXh0KCdNZXRhcGhvcmd5OiBNZXRhcGhvciBHZW5lcmF0b3InKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLCBlaXRoZXIgc3VibWl0IHRoZSBmb3JtIG9yIHJlc2V0IHRoZSBzdGF0ZVxuICBidG5FbnRyeS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZighYnRuRW50cnkuYXR0cignZGlzYWJsZWQnKSl7XG4gICAgICBpZihidG5FbnRyeS5oYXNDbGFzcygnYnRuLXN1Y2Nlc3MzZCcpKXtcbiAgICAgICAgLy8gU2F2ZSBpdCBpbiB0aGUgaGlzdG9yeSBzbyBpdCBsb29rcyBsaWtlICBhIGxlZ2l0IHVybFxuICAgICAgICBpZihoaXN0b3J5ICYmIGhpc3RvcnkucHVzaFN0YXRlKXtcbiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCAnLycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIGZvcm0sIHJlbW92ZSBjbGFzc2VzIGFuZCB3aGF0bm90XG4gICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgZ28gYWhlYWQgYW5kIHN1Ym1pdCB0aGUgZm9ybVxuICAgICAgICBtZXRhZm9ybS5zdWJtaXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIFdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkLCBnZXQgdGhlIGRhdGFcbiAgbWV0YWZvcm0ub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpe1xuICAgIC8vIFByZXZlbnQgdGhlIGZvcm0gZnJvbSBhY3R1YWxseSBzdWJtaXR0aW5nOyBhamF4IGluc3RlYWRcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgd29yZCA9IHdvcmRFbnRyeS52YWwoKTtcblxuICAgIC8vIE9ubHkgY29udGludWUgaWYgd29yZCBpc24ndCBlbXB0eVxuICAgIGlmKHdvcmQgIT0gXCJcIil7XG4gICAgICBidG5FbnRyeS5yZW1vdmVDbGFzcygnYnRuLWVycm9yM2QnKTtcblxuICAgICAgLy8gT25seSBkbyBhIHRoaW5nIGlmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGEgcmVzcG9uc2VcbiAgICAgIGlmKCFidG5FbnRyeS5hdHRyKCdkaXNhYmxlZCcpKXtcblxuICAgICAgICAvLyBTZXQgdGhlIGJ1dHRvbiB0byBkaXNhYmxlZCB3aGlsZSBpdCBsb2Fkc1xuICAgICAgICBidG5FbnRyeS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgIC8vIExvYWQgdGhlIG1ldGFwaG9yIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAkLmdldEpTT04oJy9tZXRhcGhvci8nICsgd29yZCwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgaWYoZGF0YS5tZXRhcGhvcil7XG4gICAgICAgICAgICAvLyBTYXZlIGl0IGluIHRoZSBoaXN0b3J5IHNvIGl0IGxvb2tzIGxpa2UgIGEgbGVnaXQgdXJsXG4gICAgICAgICAgICBpZihoaXN0b3J5ICYmIGhpc3RvcnkucHVzaFN0YXRlKXtcbiAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgJy9tZXRhcGhvci8nICsgZGF0YS53b3JkICsgJy8nICsgZGF0YS5tZXRhcGhvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNob3cgdGhlIGFuc3dlciBpbiB0aGUgZmllbGRzXG4gICAgICAgICAgICBzaG93QW5zd2VyKGRhdGEud29yZCwgZGF0YS5tZXRhcGhvcik7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBidG5FbnRyeS5hZGRDbGFzcygnYnRuLWVycm9yM2QnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgc3RhdGVDaGFuZ2UgPSBmdW5jdGlvbihwYXRoLCBmbil7XG5cbiAgfVxuXG4gIHZhciBoYW5kbGVIaXN0b3J5Q2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciByZWdleFJlc3VsdCA9IG1ldGFwaG9yVXJsUmVnZXguZXhlYyhsb2NhdGlvbi5wYXRobmFtZSk7XG5cbiAgICBpZihyZWdleFJlc3VsdCAmJiByZWdleFJlc3VsdC5sZW5ndGggPT0gMyl7XG4gICAgICB2YXIgd29yZCA9IGRlY29kZVVSSShyZWdleFJlc3VsdFsxXSksXG4gICAgICAgICAgbWV0YXBob3IgPSBkZWNvZGVVUkkocmVnZXhSZXN1bHRbMl0pO1xuICAgICAgc2hvd0Fuc3dlcih3b3JkLCBtZXRhcGhvcik7XG4gICAgfWVsc2V7XG4gICAgICByZXNldEZvcm0oKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgaGlzdG9yeSBjaGFuZ2VzLCBsb2FkIHRoZSBtZXRhcGhvciBvciByZXNldCB0aGUgZm9ybS4gV2F0Y2ggZm9yXG4gIC8vIGhpc3RvcnkgY2hhbmdlcy5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBoYW5kbGVIaXN0b3J5Q2hhbmdlKTtcbn0pO1xuXG4iXX0=
;